/** \file
 * Sketch demo
 * Demonstrate how to use the Image object to create an image
 */
#include <Arduino.h>
#include "Sketch.h"
#include "Image.h"
#include "TextScroll.h"
#include <math.h>
#include <bitset>


Image board;

// CUSTOMIZE: Set the speed at which to cycle between the images
static int speed = 2;
static Demo * demos;
static Demo * demo;

static String temp_string;
static int temp_num;

//static uint32_t last_time_change;
//static int image_index;

// CUSTOMIZE: Set the colors and pixels here, in hex format (similar to coloring HTML.)
// or use preset colors defined in Image.
  static uint32_t palette[] = {Image::BLACK, Image::WHITE,
  Image::RED, Image::ORANGE, Image::YELLOW, Image::GREEN, Image::BLUE, Image::PURPLE, Image::TEEL};


// This demo will cycle through the set of drawings in this array
static const int IMAGES = 5;

static int clouds[IMAGES][LED_ROWS][LED_COLS] = 
{
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,0},
 {1,1,0,1,0,1,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,1,1,0,1,0,1,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {1,1,1,1,1,1,1,1},
 {0,1,1,1,1,1,1,1},
 {0,0,1,1,0,1,0,1},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {1,1,1,1,1,1,1,1},
 {0,0,1,1,1,1,1,1},
 {0,0,0,1,1,0,1,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,0,1,1,1,1,1,1},
 {0,0,0,1,1,0,1,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 };

static int rain_cloud[IMAGES][LED_ROWS][LED_COLS] = 
{
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,6,0,0,8,0,0,6},
 {1,0,0,1,0,8,1,0},
 {6,0,6,0,1,0,0,0},
 {1,8,6,8,6,8,0,8},
 {6,6,1,6,8,6,0,6},
 {0,0,6,8,0,1,0,8}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,1,0,0,8,0,0,6},
 {1,0,1,0,0,1,0,1},
 {0,6,0,6,0,1,0,8},
 {6,0,6,0,6,0,6,1},
 {1,8,6,8,6,8,0,8},
 {6,6,1,6,8,6,0,6}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,6,0,0,1,1,0,8},
 {1,0,1,0,0,1,0,1},
 {8,0,8,0,0,6,8,0},
 {0,6,0,6,0,6,0,8},
 {6,0,6,0,6,0,6,0},
 {1,8,6,8,6,8,8,6}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,6,0,8,8,0,0,6},
 {1,0,1,0,0,1,0,1},
 {0,0,0,6,0,0,0,0},
 {8,8,6,0,8,0,8,0},
 {0,6,0,6,0,6,6,8},
 {6,0,6,0,6,6,6,0}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,1,0,0,8,0,0,6},
 {1,0,1,0,0,1,0,1},
 {6,8,0,0,6,0,8,0},
 {0,0,0,6,0,0,0,6},
 {8,0,6,0,6,8,0,0},
 {8,6,8,8,8,6,6,8}
 },
 };

 static int snow[IMAGES][LED_ROWS][LED_COLS] = 
{
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,8,0,0,1,1,0,0},
 {1,0,0,1,0,0,1,0},
 {1,0,1,0,1,0,0,0},
 {1,1,1,1,1,1,0,8},
 {1,8,1,1,1,1,0,1},
 {0,0,1,8,0,1,0,1}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,0,0,1,0,1,1,0},
 {1,0,1,0,0,1,0,1},
 {0,1,0,1,0,1,0,8},
 {1,0,1,0,1,0,1,1},
 {1,1,1,1,1,8,0,1},
 {8,1,1,1,8,1,0,1}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {0,8,0,1,0,1,1,0},
 {1,0,1,0,0,1,0,1},
 {1,0,8,0,0,1,1,0},
 {0,1,0,1,0,1,0,1},
 {1,0,1,0,1,0,1,0},
 {1,1,1,8,1,1,1,1}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {1,0,1,0,1,0,1,1},
 {1,0,1,0,0,1,0,1},
 {0,0,0,1,0,0,0,0},
 {1,8,1,0,1,0,1,0},
 {0,1,0,1,0,1,8,1},
 {1,0,1,0,1,1,1,0}
 },
 {
 {1,1,1,1,1,1,1,1},
 {1,1,1,1,1,1,1,1},
 {8,0,0,8,0,1,1,1},
 {1,0,1,0,0,1,0,1},
 {1,1,0,0,1,0,8,0},
 {0,0,0,1,0,0,0,8},
 {1,0,1,0,1,1,0,0},
 {8,1,1,8,1,1,1,1}
 },
 };

 static int wind[6][LED_ROWS][LED_COLS] = 
{
 {
 {0,0,0,0,0,0,0,0},
 {0,1,1,1,0,0,0,1},
 {1,0,0,0,1,0,1,0},
 {0,0,0,0,0,1,0,0},
 {7,7,0,0,0,0,0,0},
 {0,0,7,0,7,0,0,0},
 {0,0,0,7,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,1,1,0,0,0,1},
 {0,1,0,0,1,0,1,0},
 {0,7,0,0,0,1,0,0},
 {7,0,0,0,0,0,0,0},
 {0,7,7,0,0,0,7,0},
 {0,0,0,7,0,7,0,0},
 {0,0,0,0,7,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,1,1,0,0,1},
 {0,7,7,0,0,1,0,1},
 {7,0,0,7,0,0,1,0},
 {0,0,0,0,0,0,0,0},
 {0,0,7,7,0,0,0,7},
 {0,0,1,0,7,0,7,0},
 {0,1,0,0,0,7,0,0},
 {1,0,0,0,0,0,0,0},
 },
{
 {0,0,0,0,1,1,0,0},
 {0,0,7,7,7,0,1,0},
 {1,7,0,0,0,0,0,1},
 {0,1,0,0,0,0,0,0},
 {0,0,1,0,7,7,0,0},
 {0,0,1,0,0,0,7,0},
 {0,1,0,1,0,0,0,7},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,0,0,1,1,0},
 {0,0,0,0,7,7,0,1},
 {1,1,0,7,0,0,7,1},
 {0,0,1,0,0,0,0,0},
 {0,0,0,1,0,7,7,0},
 {0,0,1,0,0,0,0,7},
 {0,0,0,1,0,1,0,0},
 {0,0,0,0,1,0,0,0},
 },
 {
 {0,0,0,0,0,0,1,0},
 {0,0,0,0,0,7,7,1},
 {0,1,0,0,0,0,0,7},
 {0,0,1,0,1,0,0,0},
 {0,0,0,1,0,0,7,0},
 {0,0,0,0,0,0,1,7},
 {0,0,0,1,0,1,0,0},
 {0,0,0,0,1,0,0,0},
 },
 };

static int tsunami[IMAGES][LED_ROWS][LED_COLS] = 
{
  {
 {0,0,0,6,6,0,0,0},
 {0,0,6,6,6,6,1,0},
 {0,6,6,6,6,6,1,0},
 {6,6,6,0,0,1,6,0},
 {6,6,6,6,0,0,1,0},
 {6,6,6,6,0,0,0,0},
 {6,6,6,6,6,0,0,0},
 {6,6,6,6,6,0,0,0},
 },
 {
 {0,0,0,0,6,6,0,0},
 {0,0,0,6,6,6,6,1},
 {0,0,6,6,6,6,6,1},
 {0,6,6,6,6,6,1,6},
 {0,6,6,6,6,0,0,1},
 {6,6,6,6,0,0,0,0},
 {6,6,6,6,6,0,0,0},
 {6,6,6,6,6,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,6,6,6},
 {0,0,0,6,6,6,6,6},
 {0,0,6,6,6,6,6,6},
 {0,6,6,6,6,1,0,1},
 {6,6,6,6,0,0,0,0},
 {6,6,6,6,6,0,0,0},
 {6,6,6,6,6,0,0,0},
 },
{
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,6,6,6,6,6},
 {0,0,6,6,6,1,6,1},
 {0,6,6,6,6,6,6,6},
 {6,6,6,6,6,0,0,0},
 {6,6,6,6,6,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,6,1,6,1},
 {6,6,6,6,6,6,6,6},
 {6,6,6,6,6,6,6,6},
 {6,6,6,6,6,6,1,1},
 },
 };

static int tornado[13][LED_ROWS][LED_COLS] = 
{
  {
 {0,0,0,0,0,0,0,0},
 {1,1,0,0,0,0,0,0},
 {1,1,0,0,0,0,0,0},
 {1,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
  {
 {0,0,0,0,0,0,0,0},
 {1,1,1,0,0,0,0,0},
 {1,1,1,0,0,0,0,0},
 {1,1,0,0,0,0,0,0},
 {1,0,0,0,0,0,0,0},
 {1,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
  {
 {0,0,0,0,0,0,0,0},
 {1,1,1,1,0,0,0,0},
 {1,1,1,1,0,0,0,0},
 {1,1,1,0,0,0,0,0},
 {1,1,0,0,0,0,0,0},
 {1,1,0,0,0,0,0,0},
 {1,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
  {
 {0,0,0,0,0,0,0,0},
 {1,1,1,1,1,0,0,0},
 {1,1,1,1,1,0,0,0},
 {1,1,1,1,0,0,0,0},
 {1,1,1,0,0,0,0,0},
 {0,1,1,0,0,0,0,0},
 {0,1,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
  {
 {0,0,0,0,0,0,0,0},
 {1,1,1,1,1,1,1,0},
 {1,1,1,1,1,1,0,0},
 {1,1,1,1,1,0,0,0},
 {0,1,1,1,0,0,0,0},
 {0,0,1,1,0,0,0,0},
 {0,0,1,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
  {
 {0,0,0,0,0,0,0,0},
 {1,1,1,1,1,1,1,1},
 {0,1,1,1,1,1,1,0},
 {0,0,1,1,1,1,0,0},
 {0,0,1,1,1,0,0,0},
 {0,0,0,1,1,0,0,0},
 {0,0,0,0,1,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,1,1,1,1,1,1,1},
 {0,0,1,1,1,1,1,1},
 {0,0,0,1,1,1,1,0},
 {0,0,0,1,1,1,0,0},
 {0,0,0,0,1,1,0,0},
 {0,0,0,0,0,1,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,0,1,1,1,1,1,1},
 {0,0,0,1,1,1,1,1},
 {0,0,0,0,1,1,1,1},
 {0,0,0,0,1,1,1,0},
 {0,0,0,0,0,1,1,0},
 {0,0,0,0,0,0,1,0},
 {0,0,0,0,0,0,0,0},
 },
{
 {0,0,0,0,0,0,0,0},
 {0,0,0,1,1,1,1,1},
 {0,0,0,0,1,1,1,1},
 {0,0,0,0,0,1,1,1},
 {0,0,0,0,0,1,1,1},
 {0,0,0,0,0,0,1,1},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,0},
 },
{
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,1,1,1,1},
 {0,0,0,0,0,1,1,1},
 {0,0,0,0,0,0,1,1},
 {0,0,0,0,0,0,1,1},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,1,1,1},
 {0,0,0,0,0,0,1,1},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,1,1},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
  {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,1},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 };
 static int sun[IMAGES][LED_ROWS][LED_COLS] = 
{
  {
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,3,1,3},
 {4,4,4,4,4,3,1,0},
 {4,4,4,4,4,1,3,0},
 {4,4,4,4,4,1,0,0},
 {3,3,0,3,1,0,3,0},
 {1,0,0,1,3,0,0,0},
 {3,0,0,1,0,0,0,0},
 },
 {
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,2,3,0},
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,2,2,0},
 {4,4,4,4,4,2,0,0},
 {3,2,0,3,3,0,3,0},
 {2,0,0,2,2,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
{
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,3,2,0},
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,2,3,0},
 {4,4,4,4,4,3,0,0},
 {2,3,0,2,2,0,2,0},
 {3,0,0,3,3,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,2,3,0},
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,3,2,0},
 {4,3,4,4,4,2,0,0},
 {3,2,0,3,2,0,3,0},
 {2,0,0,2,2,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 {
 {4,4,4,4,3,0,0,0},
 {4,4,4,4,4,3,2,0},
 {4,4,4,4,4,0,0,0},
 {4,4,4,4,4,2,3,0},
 {4,4,4,4,4,3,0,0},
 {2,2,0,2,2,0,2,0},
 {3,0,0,3,3,0,0,0},
 {0,0,0,0,0,0,0,0},
 },
 };



void Sketch::set(int temp, String x)
{
  
  temp_num = temp;
  //Serial.print(temp_num);
  temp_string = x;
  //Serial.print(x);
  
}


void Sketch::begin()
{
  image_index = 1;
}

bool Sketch::step(float nx, float ny, float nz){
  
       if(temp_num == 48){
        
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= IMAGES) {
            image_index = 0;
          }
          board.setimage(palette, rain_cloud[image_index]);
          last_time_change = now;
          }
          // never force redraw
          return false;
       }
       
       else if(temp_num == 49){
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= IMAGES) {
            image_index = 0;
          }
            board.setimage(palette, snow[image_index]);
          
          last_time_change = now;
        }
        // never force redraw
        return false;
      }
      else if(temp_num == 50){
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= IMAGES) {
            image_index = 0;
          }

            board.setimage(palette, sun[image_index]);
          
          last_time_change = now;
        }
        // never force redraw
        return false;
      }
      
      else if(temp_num == 51){
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= IMAGES) {
            image_index = 0;
          }

            board.setimage(palette, tsunami[image_index]);
          
          last_time_change = now;
        }
        // never force redraw
        return false;
      }
      
      else if(temp_num == 52){
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= IMAGES) {
            image_index = 0;
          }

            board.setimage(palette, clouds[image_index]);
          
          last_time_change = now;
        }
        // never force redraw
        return false;
      }
      else if(temp_num == 53){
        const uint32_t now = millis();
        if (now - last_time_change > (1000ul / speed)) {
          image_index +=1;
          if (image_index >= 13) {
            image_index = 0;
          }

            board.setimage(palette, tornado[image_index]);
          
          last_time_change = now;
        }
        // never force redraw
        return false;
      }
      
      
}
    
void Sketch::draw(RGBMatrix &matrix){
      
      board.paint(matrix);
  
}

